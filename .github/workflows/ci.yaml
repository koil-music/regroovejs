name: ci
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  test_lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.4
    - uses: actions/setup-node@v2.1.3
    - name: Making sure 'npm run lint' does not change anything.
      run: |
        npm ci
        npm run lint
  test:
    runs-on: ${{ matrix.os }}
    needs:
      - test_lint
    strategy:
      matrix:
        node: [ '14', '12', '10' ]
        os: [ ubuntu-latest ]
    name: Test with Node v${{ matrix.node }} on ${{ matrix.os }}
    steps:
    - name: Tell if project is using npm or yarn
      id: step1
      uses: garronej/github_actions_toolkit@v2.2
      with:
        action_name: tell_if_project_uses_npm_or_yarn
    - uses: actions/checkout@v2.3.4
    - uses: actions/setup-node@v2.1.3
      with:
        node-version: ${{ matrix.node }}
    - if: steps.step1.outputs.npm_or_yarn == 'npm'
      env:
        SSH_KEY_REGROOVE_MODELS: ${{secrets.SSH_KEY_REGROOVE_MODELS}}
      run: |
        mkdir $HOME/.ssh && echo "$SSH_KEY_REGROOVE_MODELS" > $HOME/.ssh/id_rsa && chmod 600 $HOME/.ssh/id_rsa && git submodule update --init --recursive
        npm ci
        npm run build
        npm test
  check_if_version_upgraded:
    name: Check if version upgrade
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: test
    outputs:
      from_version: ${{ steps.step1.outputs.from_version }}
      to_version: ${{ steps.step1.outputs.to_version }}
      is_upgraded_version: ${{steps.step1.outputs.is_upgraded_version }}
    steps:
    - uses: garronej/github_actions_toolkit@v2.2
      id: step1
      with:
        action_name: is_package_json_version_upgraded
  publish_on_npm:
    runs-on: ubuntu-latest
    needs:
      - check_if_version_upgraded
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        ref: ${{ github.ref }}
    - uses: actions/setup-node@v2.1.3
      with:
        node-version: '15'
    - run: |
        npm ci
        npm run build
    - name: Publishing on NPM
      run: |
        if [ "$(npm show . version)" = "$VERSION" ]; then
          echo "This version is already published"
          exit 0
        fi
        if [ "$NPM_TOKEN" = "" ]; then
          echo "Can't publish on NPM, You must first create a secret called NPM_TOKEN that contains your NPM auth token. https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets"
          false
        fi
        echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > .npmrc
        npm publish
        rm .npmrc
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        VERSION: ${{ needs.check_if_version_upgraded.outputs.to_version }}
